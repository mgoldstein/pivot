<?php
/**
 * @file
 * Show times feed import module.
 */

define('PIVOT_SCHEDULE_MAX_IMPORT_FILE_SIZE', 4194304);
define('PIVOT_SCHEDULE_IMPORT_FILE_DIRECTORY', 'public://schedule-imports');

define('PIVOT_SCHEDULE_PRIMETIME_START', '7:00pm');
define('PIVOT_SCHEDULE_PRIMETIME_END', '11:00pm');
define('PIVOT_SCHEDULE_REFERENCE_TZ', 'America/New_York');

/**
 * PivotScheduleShowTime entity.
 */
class PivotScheduleShowTime extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'pivot_schedule_show_time');
  }

  protected function defaultLabel() {
    return t('@name @time', array(
      '@name' => $this->element_name,
      '@time' => date('d M Y g:i A T', $this->broadcast_start_time),
    ));
  }

  protected function defaultUri() {
    return "<front>";
  }
}

/**
 * PivotScheduleShowTime Entity Controller.
 */
class PivotScheduleShowTimeController extends EntityApiController {

  public function create(array $values = array()) {
    $values += array(
      'id' => 0,
      'file_id' => 0,
      'broadcast_start_time' => 0,
      'broadcast_length' => 0,
      'element_name' => '',
      'title_name' => '',
      'title_synopsis' => '',
      'title_premiere_indicator_current_schedule' => 0,
      'title_code_wo_series_prefix' => '',
      'created' => 0,
      'changed' => 0,
    );
    return parent::create($values);
  }
}

/**
 * Implements hook_permission().
 */
function pivot_schedule_permission() {
  // Return permissions for the standard API Entity operations.
  return array(
    'administer pivot_schedule show_times' => array(
      'title' => t('Administer schedule show times'),
      'restrict access' => TRUE,
    ),
    'import pivot_schedule show_times' => array(
      'title' => t('Import schedule show times'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback.
 */
function pivot_schedule_access($op, $entity = NULL, $account = NULL) {
  // Block unknown operations.
  if (in_array($op, array('administer', 'import'))) {
    return user_access("$op pivot_schedule show_times", $account)
      || user_access("administer pivot_schedule show_times", $account);
  }
  return FALSE;
}

/**
 * Implements hook_entity_info().
 */
function pivot_schedule_entity_info() {
  return array(
    'pivot_schedule_show_time' => array(
      'label' => t("Show Time"),
      'entity class' => 'PivotScheduleShowTime',
      'controller class' => 'PivotScheduleShowTimeController',
      'base table' => 'pivot_schedule_show_time',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'access callback' => 'pivot_schedule_access',
      'module' => 'pivot_schedule',
    ),
  );
}

/**
 * Implements hook_entity_property_info().
 */
function pivot_schedule_entity_property_info() {
  $info = array('pivot_schedule_show_time' => array('properties' => array()));
  $properties = &$info['pivot_schedule_show_time']['properties'];

  $properties['id'] = array(
    'label' => t('Show Time ID'),
    'description' => t('The unique show time id.'),
    'type' => 'integer',
    'validation callback' => 'entity_property_validate_integer_positive',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'id',
    'required' => TRUE,
    'field' => FALSE,
  );
  $properties['broadcast_start_time'] = array(
    'label' => t('Broadcast Start Time'),
    'description' => t('Start date and time of the episode/content broadcast.'),
    'type' => 'date',
    'validation callback' => 'entity_property_validate_integer_non_negative',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'broadcast_start_time',
    'required' => TRUE,
    'field' => FALSE,
  );
  $properties['broadcast_length'] = array(
    'label' => t('Broadcast length'),
    'description' => t('Duration of the broadcast in seconds.'),
    'type' => 'duration',
    'validation callback' => 'entity_property_validate_integer_non_negative',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'broadcast_length',
    'required' => TRUE,
    'field' => FALSE,
  );
  $properties['element_name'] = array(
    'label' => t('Element Name'),
    'description' => t('Name of the broadcast show/program.'),
    'type' => 'text',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'element_name',
    'required' => TRUE,
    'field' => FALSE,
    'sanitized' => TRUE,
    'sanitize' => FALSE,
  );
  $properties['title_name'] = array(
    'label' => t('Title Name'),
    'description' => t('Name of the broadcast episode/content.'),
    'type' => 'text',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'title_name',
    'required' => FALSE,
    'field' => FALSE,
    'sanitized' => TRUE,
    'sanitize' => FALSE,
  );
  $properties['title_synopsis'] = array(
    'label' => t('Synopsis'),
    'description' => t('Synopsis of the broadcast episode/content.'),
    'type' => 'text',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'title_synopsis',
    'required' => FALSE,
    'field' => FALSE,
    'sanitized' => TRUE,
    'sanitize' => FALSE,
  );
  $properties['title_premiere_indicator_current_schedule'] = array(
    'label' => t('Premiere Indicator'),
    'description' => t('Title premiere indicator current schedule.'),
    'type' => 'boolean',
    'access callback' => 'pivot_schedule_accesspivot_schedule_access',
    'schema field' => 'title_premiere_indicator_current_schedule',
    'required' => FALSE,
    'field' => FALSE,
  );
  $properties['title_code_wo_series_prefix'] = array(
    'label' => t('Title Code w/o Series Prefix'),
    'description' => t('Your guess is as good as mine.'),
    'type' => 'text',
    'access callback' => 'pivot_schedule_accesspivot_schedule_access',
    'schema field' => 'title_code_wo_series_prefix',
    'required' => TRUE,
    'field' => FALSE,
    'sanitized' => TRUE,
    'sanitize' => FALSE,
  );
  $properties['created'] = array(
    'label' => t('Created'),
    'description' => t('When the show time was created.'),
    'type' => 'date',
    'validation callback' => 'entity_property_validate_integer_non_negative',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'created',
    'required' => TRUE,
    'field' => FALSE,
  );
  $properties['changed'] = array(
    'label' => t('Last Changed'),
    'description' => t('When the show time was last changed.'),
    'type' => 'date',
    'validation callback' => 'entity_property_validate_integer_non_negative',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'changed',
    'required' => TRUE,
    'field' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function pivot_schedule_menu() {
  return array(
    'admin/config/schedule' => array(
      'title' => 'Show Schedule',
      'description' => 'Configuraion of the show schedule',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
    'admin/config/schedule/import' => array(
      'title' => 'Schedule Import',
      'description' => 'Import show schedule data.',
      'page callback' => 'pivot_schedule_import_page',
      'access callback' => 'user_access',
      'access arguments' => array('import pivot_schedule show_times'),
    ),
  );
}

function pivot_schedule_import_page() {
  $content = array();
  $content['import_form'] = drupal_get_form('pivot_schedule_import_form');
  return $content;
}

function pivot_schedule_import_form($form, &$form_state) {

  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Schedule Data File'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#weight' => 40,
  );

  return $form;
}

function pivot_schedule_validate_import_file(stdClass $file) {

  $errors = array();

  if ($file->filemime !== 'application/xml') {
    // The file is not an XML file.
    $errors[] = t('Schedule import must be an XML file.');
  }
  else {
    $schedule = simplexml_load_file($file->uri);
    if ($schedule === FALSE) {
      // The file could not be parsed.
      $errors[] = t('Schedule import must be a valid XML file.');
    }
  }

  return $errors;
}

function pivot_schedule_import_form_validate($form, &$form_state) {

  $file = file_save_upload('file', array(
    'file_validate_size' => array(
      PIVOT_SCHEDULE_MAX_IMPORT_FILE_SIZE,
      PIVOT_SCHEDULE_MAX_IMPORT_FILE_SIZE,
    ),
    'file_validate_extensions' => array('xml'),
    'pivot_schedule_validate_import_file' => array(),
  ));

  if ($file) {

    // Make sure the schedule import file directory exists.
    $directory = PIVOT_SCHEDULE_IMPORT_FILE_DIRECTORY;
    if (file_prepare_directory($directory)) {
      if ($file = file_move($file, PIVOT_SCHEDULE_IMPORT_FILE_DIRECTORY)) {
        $form_state['storage']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write file to schedule import directory.'));
      }
    }
    else {
      form_set_error('file', t('Schedule import directory does not exist or is not writable.'));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}

function pivot_schedule_import_form_submit($form, &$form_state) {

  $file = $form_state['storage']['file'];
  unset($form_state['storage']['file']);

  try {

    // Wipe out any previous schedule.
    db_delete('pivot_schedule_show_time');

    // Store the import file permanently.
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);

    $schedule = simplexml_load_file($file->uri);
    $imported = 0;
    foreach ($schedule as $show) {

      $values = array(
        'file_id' => $file->fid,
        'created' => REQUEST_TIME,
        'changed' => REQUEST_TIME,
      );

      // Straight forward string values.
      $values['element_name'] = (string) $show->ElementName;
      $values['title_name'] =  (string) $show->TitleName;
      $values['title_synopsis'] =  (string) $show->TitleSynopsis;
      $values['title_code_wo_series_prefix']
        = (string) $show->TitleCodeWOSeriesPrefix;

      // Combine and convert the start date and time instead a Unix timestamp.
      $start_date = (string) $show->StartDateBroadcast;
      $start_time = (string) $show->StartTime;
      $timezone = new DateTimeZone('EST');
      $start_datetime = DateTime::createFromFormat("m/d/Y G:i:s",
        $start_date . ' ' . $start_time, $timezone);
      if ($start_datetime === FALSE) {
        throw new Exception("Invalid start date time.");
      }
      $values['broadcast_start_time'] = $start_datetime->getTimestamp();

      // Convert the broadcast length to seconds.
      $duration = explode(':', (string) $show->Length);
      $values['broadcast_length']
        = ($duration[0] * 3600)
        + ($duration[1] * 60)
        +  $duration[2];

      // Assume that only premieres will have a value for this field.
      $premiere = (string) $show->TitlePremiereIndicatorCurrentSchedule;
      $values['title_premiere_indicator_current_schedule'] = !empty($premiere);

      // Create and save the schedule time.
      $show_time = entity_create('pivot_schedule_show_time', $values);
      $show_time->save();

      // Tick
      $imported += 1;
    }

    drupal_set_message(t('@count show times imported.', array(
      '@count' => $imported,
    )), 'status');
  }
  catch (Exception $e) {
    drupal_set_message(t('An error occurred while importing the schedule, please verify the contents of the import file and try again.'), 'error');
  }
}

/**
 * Implements hook_block_info().
 */
function pivot_schedule_block_info() {
  return array(
    'primetime_listing' => array(
      'info' => t('Schedule Primetime Listing'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'show_listing' => array(
      'info' => t('Schedule Show Listing'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Get the settings for a block given the block's delta.
 */
function pivot_schedule_block_settings($delta) {
  $values = FALSE;
  if ($delta === 'primetime_listing') {
    $values = variable_get('pivot_schedule_primetime_listing', array());
    $values += array(
      'headline_text' => t("What's On Tonight"),
      'headline_link' => '#upcoming-times',
      'full_schedule_text' => t('See Full Schedule'),
      'full_schedule_link' => '#',
      'start_time' => PIVOT_SCHEDULE_PRIMETIME_START,
      'end_time' => PIVOT_SCHEDULE_PRIMETIME_END,
      'timezone' => PIVOT_SCHEDULE_REFERENCE_TZ,
    );
  }
  elseif ($delta === 'show_listing') {
    $values = variable_get('pivot_schedule_show_listing', array());
    $values += array(
      'count' => 6,
      'timezone' => PIVOT_SCHEDULE_REFERENCE_TZ,
    );
  }
  return $values;
}

/**
 * Implements hook_block_configure().
 */
function pivot_schedule_block_configure($delta = '') {
  $form = array();

  $settings = pivot_schedule_block_settings($delta);

  if ($delta === 'primetime_listing') {

    $form['pivot_schedule'] = array(
      '#type' => 'fieldset',
      '#title' => t('Schedule Settings'),
      '#tree' => TRUE,
    );

    $form['pivot_schedule']['headline_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Headline Text'),
      '#default_value' => $settings['headline_text'],
    );

    $form['pivot_schedule']['headline_link'] = array(
      '#type' => 'textfield',
      '#title' => t('Headline Link'),
      '#default_value' => $settings['headline_link'],
    );

    $form['pivot_schedule']['full_schedule_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Full Schedule Text'),
      '#default_value' => $settings['full_schedule_text'],
    );

    $form['pivot_schedule']['full_schedule_link'] = array(
      '#type' => 'textfield',
      '#title' => t('Full Schedule Link'),
      '#default_value' => $settings['full_schedule_link'],
    );

    $form['pivot_schedule']['start_time'] = array(
      '#type' => 'textfield',
      '#title' => t('Start Time'),
      '#description' => t('Start time in 12 hour format (e.g. 7:00pm).'),
      '#default_value' => $settings['start_time'],
    );

    $form['pivot_schedule']['end_time'] = array(
      '#type' => 'textfield',
      '#title' => t('End Time'),
      '#description' => t('End time in 12 hour format (e.g. 11:00pm).'),
      '#default_value' => $settings['end_time'],
    );

    $form['pivot_schedule']['timezone'] = array(
      '#type' => 'textfield',
      '#title' => t('Timezone'),
      '#description' => t('Timezone of start and end times. For a list of valid values see <a href="http://php.net/manual/en/timezones.php" target="_blank">PHP - List of Supported Timezones</a>'),
      '#default_value' => $settings['timezone'],
      '#element_validate' => array('pivot_schedule_element_valdiate_timezone'),
    );
  }
  elseif ($delta === 'show_listing') {

    $form['pivot_schedule'] = array(
      '#type' => 'fieldset',
      '#title' => t('Schedule Settings'),
      '#tree' => TRUE,
    );

    $form['pivot_schedule']['count'] = array(
      '#type' => 'textfield',
      '#title' => t(''),
      '#default_value' => $settings['count'],
      '#element_validate' => array('element_validate_integer_positive'),
    );

    $form['pivot_schedule']['timezone'] = array(
      '#type' => 'textfield',
      '#title' => t('Timezone'),
      '#description' => t('Timezone of the show times. For a list of valid values see <a href="http://php.net/manual/en/timezones.php" target="_blank">PHP - List of Supported Timezones</a>'),
      '#default_value' => $settings['timezone'],
      '#element_validate' => array('pivot_schedule_element_valdiate_timezone'),
    );
  }

  return $form;
}

function pivot_schedule_element_valdiate_timezone($element, &$form_state) {
  try {
    $tz = new DateTimeZone($element['#value']);
  }
  catch (Exception $e) {
    form_error($element, t('%name must be a valid timezone.', array(
      '%name' => $element['#title'],
    )));
  }
}

/**
 * Implements hook_block_save().
 */
function pivot_schedule_block_save($delta = '', $edit = array()) {
  variable_set('pivot_schedule_' . $delta, $edit['pivot_schedule']);
}

/**
 * Implements hook_block_view().
 */
function pivot_schedule_block_view($delta = '') {

  $block = array(
    'subject' => '',
    'content' => '',
  );

  $settings = pivot_schedule_block_settings($delta);

  if ($delta === 'primetime_listing') {

    // Get the prime time listing.
    $show_times = pivot_schedule_get_primetime_listing($settings['start_time'],
      $settings['end_time'], $settings['timezone']);

    // Set the content from the theme template.
    $block['content'] = array(
      '#theme' => 'pivot_schedule_primetime_listing',
      '#show_times' => $show_times,
    );

    // Pass the block settings to the template as well.
    foreach ($settings as $name => $value) {
      $block['content']["#{$name}"] = $value;
    }
  }
  elseif ($delta === 'show_listing') {

    // Get the node being shown.
    $node = menu_get_object();
    if ($node) {

      // Check if the node has schedule name and listing title fields.
      $schedule_name = FALSE;
      $listing_title = FALSE;
      $items = field_get_items('node', $node, 'field_schedule_name');
      if ($items !== FALSE) {
        $item = reset($items);
        if ($item != FALSE && !empty($item['value'])) {
          $schedule_name = $item['value'];
        }
      }
      $items = field_get_items('node', $node, 'field_schedule_listing_title');
      if ($items !== FALSE) {
        $item = reset($items);
        if ($item != FALSE && !empty($item['value'])) {
          $listing_title = $item['value'];
        }
      }

      if ($schedule_name !== FALSE && $listing_title !== FALSE) {

        // Get the show listing for the named show.
        $show_times = pivot_schedule_get_show_listing($schedule_name,
          $settings['count'], $settings['timezone']);

        // Set the content from the theme template.
        $block['content'] = array(
          '#theme' => 'pivot_schedule_show_listing',
          '#show_times' => $show_times,
          '#headline' => $listing_title,
        );

        // Pass the block settings to the template as well.
        foreach ($settings as $name => $value) {
          $block['content']["#{$name}"] = $value;
        }
      }
    }
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function pivot_schedule_theme() {
  return array(
    'pivot_schedule_primetime_listing' => array(
      'variables' => array(
        'show_times' => array(),
        'headline_text' => NULL,
        'headline_link' => NULL,
        'full_schedule_text' => NULL,
        'full_schedule_link' => NULL,
        'start_time' => NULL,
        'end_time' => NULL,
        'timezone' => NULL,
      ),
      'template' => 'pivot-schedule-primetime-listing',
    ),
    'pivot_schedule_show_listing' => array(
      'variables' => array(
        'show_times' => array(),
        'headline' => NULL,
        'count' => 6,
        'timezone' => NULL,
      ),
      'template' => 'pivot-schedule-show-listing',
    ),
  );
}

function pivot_schedule_shows_by_schedule_name() {
  // Static caching
  static $shows_by_schedule_name = FALSE;

  if ($shows_by_schedule_name === FALSE) {

    $shows_by_schedule_name = array();

    // Get the show type nodes.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'show');
    $entities = $query->execute();

    if (isset($entities['node'])) {

      // Load the actual show nodes.
      $ids = array_keys($entities['node']);
      $shows = entity_load('node', $ids);

      // Add all show's with a schedule name to the list.
      foreach ($shows as $show) {
        $items = field_get_items('node', $show, 'field_schedule_name');
        if ($items !== FALSE) {
          $item = reset($items);
          if ($item != FALSE && !empty($item['value'])) {
            $shows_by_schedule_name[$item['value']] = $show;
          }
        }
      }
    }
  }

  return $shows_by_schedule_name;
}

function pivot_schedule_load_listing($ids, $timezone) {

  $listing = array();

  // Load the actual show times.
  $show_times = entity_load('pivot_schedule_show_time', $ids);

  // Get a list of shows that may appear in the schedule.
  $shows_by_schedule_name = pivot_schedule_shows_by_schedule_name();

  // Build the listing.
  foreach ($show_times as $show_time) {

    $item = new StdClass();

    // Adjust the start time to the reference timezone.
    $item->start = new DateTime('now', $timezone);
    $item->start->setTimestamp((int) $show_time->broadcast_start_time);

    // Use the show title as it appears in the feed.
    $item->show_title = $show_time->element_name;

    // Check for a show page to link to.
    if (array_key_exists($show_time->element_name, $shows_by_schedule_name)) {
      $show = $shows_by_schedule_name[$show_time->element_name];
      $uri = node_uri($show);
      $item->show_path = url($uri['path']);
    }
    else {
      $item->show_path = NULL;
    }

    // Add the show time to the listing.
    $listing[] = $item;
  }

  return $listing;
}

function pivot_schedule_get_primetime_listing($start, $end, $tz) {

  $listing = array();

  // Initialize the reference timezone.
  try {
    $timezone = new DateTimeZone($tz);
  }
  catch (Exception $e) {
    // The configured time zone is invalid, use the default until
    // it can be changed
    drupal_set_message(t('Invalid primetime schedule timezone'), 'warning');
    $timezone = new DateTimeZone(PIVOT_SCHEDULE_REFERENCE_TZ);
  }
  // Convert the start and end times to actual date times.
  $start_time = new DateTime($start, $timezone);
  $end_time = new DateTime($end, $timezone);

  // Get the show times during primetime.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'pivot_schedule_show_time')
    ->propertyCondition('broadcast_start_time', $start_time->getTimestamp(), '>=')
    ->propertyCondition('broadcast_start_time', $end_time->getTimestamp(), '<=')
    ->propertyOrderBy('broadcast_start_time');
  $entities = $query->execute();

  if (isset($entities['pivot_schedule_show_time'])) {
    $ids = array_keys($entities['pivot_schedule_show_time']);
    $listing = pivot_schedule_load_listing($ids, $timezone);
  }

  return $listing;
}

function pivot_schedule_get_show_listing($schedule_name, $count, $tz) {

  $listing = array();

  // Initialize the reference timezone.
  try {
    $timezone = new DateTimeZone($tz);
  }
  catch (Exception $e) {
    // The configured time zone is invalid, use the default until
    // it can be changed
    drupal_set_message(t('Invalid show schedule timezone'), 'warning');
    $timezone = new DateTimeZone(PIVOT_SCHEDULE_REFERENCE_TZ);
  }

  // Get the current hour in the reference timezone.
  $this_hour = new DateTime('now', $timezone);
  $offset = $this_hour->format('i \m\i\n\u\t\e\s + s \s\e\c\o\n\d\s');
  $interval = DateInterval::createFromDateString($offset);
  $this_hour->sub($interval);

  // Get the upcoming show times.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'pivot_schedule_show_time')
    ->propertyCondition('broadcast_start_time', $this_hour->getTimestamp(), '>=')
    ->propertyCondition('element_name', $schedule_name)
    ->propertyOrderBy('broadcast_start_time')
    ->range(0, $count);
  $entities = $query->execute();

  if (isset($entities['pivot_schedule_show_time'])) {
    $ids = array_keys($entities['pivot_schedule_show_time']);
    $listing = pivot_schedule_load_listing($ids, $timezone);
  }

  return $listing;
}
