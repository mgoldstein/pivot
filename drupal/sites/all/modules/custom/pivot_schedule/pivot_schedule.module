<?php
/**
 * @file
 * Show times feed import module.
 */

define('PIVOT_SCHEDULE_MAX_IMPORT_FILE_SIZE', 4194304);
define('PIVOT_SHEDULE_IMPORT_FILE_DIRECTORY', 'public://schedule-imports');
/**
 * PivotScheduleShowTime entity.
 */
class PivotScheduleShowTime extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'pivot_schedule_show_time');
  }

  protected function defaultLabel() {
    return t('@name @time', array(
      '@name' => $this->element_name,
      '@time' => date('d M Y g:i A T', $this->broadcast_start_time),
    ));
  }

  protected function defaultUri() {
    return "<front>";
  }
}

/**
 * PivotScheduleShowTime Entity Controller.
 */
class PivotScheduleShowTimeController extends EntityApiController {

  public function create(array $values = array()) {
    $values += array(
      'id' => 0,
      'file_id' => 0,
      'broadcast_start_time' => 0,
      'broadcast_length' => 0,
      'element_name' => '',
      'title_name' => '',
      'title_synopsis' => '',
      'title_premiere_indicator_current_schedule' => 0,
      'title_code_wo_series_prefix' => '',
      'created' => 0,
      'changed' => 0,
    );
    return parent::create($values);
  }
}

/**
 * Implements hook_permission().
 */
function pivot_schedule_permission() {
  // Return permissions for the standard API Entity operations.
  return array(
    'administer pivot_schedule show_times' => array(
      'title' => t('Administer schedule show times'),
      'restrict access' => TRUE,
    ),
    'import pivot_schedule show_times' => array(
      'title' => t('Import schedule show times'),
      'restrict access' => TRUE,
    ),
    'view pivot_schedule show_times' => array(
      'title' => t('View schedule show times'),
    ),
    'delete pivot_schedule show_times' => array(
      'title' => t('Delete schedule show times'),
      'restrict access' => TRUE,
    ),
    'purge pivot_schedule show_times' => array(
      'title' => t('Purge schedule show imports'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback.
 */
function pivot_schedule_access($op, $entity = NULL, $account = NULL) {
  // Block unknown operations.
  if (in_array($op, array('administer', 'import', 'view', 'delete', 'purge'))) {
    return user_access("$op pivot_schedule show_times", $account)
      || user_access("administer pivot_schedule show_times", $account);
  }
  return FALSE;
}

/**
 * Implements hook_entity_info().
 */
function pivot_schedule_entity_info() {
  return array(
    'pivot_schedule_show_time' => array(
      'label' => t("Show Time"),
      'entity class' => 'PivotScheduleShowTime',
      'controller class' => 'PivotScheduleShowTimeController',
      'base table' => 'pivot_schedule_show_time',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'access callback' => 'pivot_schedule_access',
      'module' => 'pivot_schedule',
    ),
  );
}

/**
 * Implements hook_entity_property_info().
 */
function pivot_schedule_entity_property_info() {
  $info = array('pivot_schedule_show_time' => array('properties' => array()));
  $properties = &$info['pivot_schedule_show_time']['properties'];

  $properties['id'] = array(
    'label' => t('Show Time ID'),
    'description' => t('The unique show time id.'),
    'type' => 'integer',
    'validation callback' => 'entity_property_validate_integer_positive',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'id',
    'required' => TRUE,
    'field' => FALSE,
  );
  $properties['broadcast_start_time'] = array(
    'label' => t('Broadcast Start Time'),
    'description' => t('Start date and time of the episode/content broadcast.'),
    'type' => 'date',
    'validation callback' => 'entity_property_validate_integer_non_negative',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'broadcast_start_time',
    'required' => TRUE,
    'field' => FALSE,
  );
  $properties['broadcast_length'] = array(
    'label' => t('Broadcast length'),
    'description' => t('Duration of the broadcast in seconds.'),
    'type' => 'duration',
    'validation callback' => 'entity_property_validate_integer_non_negative',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'broadcast_length',
    'required' => TRUE,
    'field' => FALSE,
  );
  $properties['element_name'] = array(
    'label' => t('Element Name'),
    'description' => t('Name of the broadcast show/program.'),
    'type' => 'text',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'element_name',
    'required' => TRUE,
    'field' => FALSE,
    'sanitized' => TRUE,
    'sanitize' => FALSE,
  );
  $properties['title_name'] = array(
    'label' => t('Title Name'),
    'description' => t('Name of the broadcast episode/content.'),
    'type' => 'text',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'title_name',
    'required' => FALSE,
    'field' => FALSE,
    'sanitized' => TRUE,
    'sanitize' => FALSE,
  );
  $properties['title_synopsis'] = array(
    'label' => t('Synopsis'),
    'description' => t('Synopsis of the broadcast episode/content.'),
    'type' => 'text',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'title_synopsis',
    'required' => FALSE,
    'field' => FALSE,
    'sanitized' => TRUE,
    'sanitize' => FALSE,
  );
  $properties['title_premiere_indicator_current_schedule'] = array(
    'label' => t('Premiere Indicator'),
    'description' => t('Title premiere indicator current schedule.'),
    'type' => 'boolean',
    'access callback' => 'pivot_schedule_accesspivot_schedule_access',
    'schema field' => 'title_premiere_indicator_current_schedule',
    'required' => FALSE,
    'field' => FALSE,
  );
  $properties['title_code_wo_series_prefix'] = array(
    'label' => t('Title Code w/o Series Prefix'),
    'description' => t('Your guess is as good as mine.'),
    'type' => 'text',
    'access callback' => 'pivot_schedule_accesspivot_schedule_access',
    'schema field' => 'title_code_wo_series_prefix',
    'required' => TRUE,
    'field' => FALSE,
    'sanitized' => TRUE,
    'sanitize' => FALSE,
  );
  $properties['created'] = array(
    'label' => t('Created'),
    'description' => t('When the show time was created.'),
    'type' => 'date',
    'validation callback' => 'entity_property_validate_integer_non_negative',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'created',
    'required' => TRUE,
    'field' => FALSE,
  );
  $properties['changed'] = array(
    'label' => t('Last Changed'),
    'description' => t('When the show time was last changed.'),
    'type' => 'date',
    'validation callback' => 'entity_property_validate_integer_non_negative',
    'access callback' => 'pivot_schedule_access',
    'schema field' => 'changed',
    'required' => TRUE,
    'field' => FALSE,
  );

  return $info;
}

function pivot_schedule_show_time_create(array $values) {
  return entity_create('pivot_schedule_show_time', $values);
}

function pivot_schedule_show_time_delete($id) {
  return entity_delete('pivot_schedule_show_time', $id);
}

function pivot_schedule_show_time_delete_multiple(array $ids) {
  return entity_delete_multiple('pivot_schedule_show_time', $ids);
}

function pivot_schedule_show_time_save($show_time) {
  return entity_save('pivot_schedule_show_time', $show_time);
}

function pivot_schedule_show_time_view(array $show_times, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  return entity_view('pivot_schedule_show_time', $show_times, $view_mode, $langcode, $page);
}

/**
 * Implements hook_menu().
 */
function pivot_schedule_menu() {
  return array(
    'admin/config/schedule' => array(
      'title' => 'Show Schedule',
      'description' => 'Configuraion of the show schedule',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
    'admin/config/schedule/import' => array(
      'title' => 'Schedule Import',
      'description' => 'Import show schedule data.',
      'page callback' => 'pivot_schedule_import_page',
      'access callback' => 'user_access',
      'access arguments' => array('import pivot_schedule show_times'),
    ),
  );
}

function pivot_schedule_import_page() {

  $content = array();

  $content['import_form'] = drupal_get_form('pivot_schedule_import_form');

  return $content;
}

function pivot_schedule_import_form($form, &$form_state) {

  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Schedule Data File'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#weight' => 40,
  );

  return $form;
}

function pivot_schedule_validate_import_file(stdClass $file) {

  $errors = array();

  if ($file->filemime !== 'application/xml') {
    // The file is not an XML file.
    $errors[] = t('Schedule import must be an XML file.');
  }
  else {
    $schedule = simplexml_load_file($file->uri);
    if ($schedule === FALSE) {
      // The file could not be parsed.
      $errors[] = t('Schedule import must be a valid XML file.');
    }
  }

  return $errors;
}

function pivot_schedule_import_form_validate($form, &$form_state) {

  $file = file_save_upload('file', array(
    'file_validate_size' => array(
      PIVOT_SCHEDULE_MAX_IMPORT_FILE_SIZE,
      PIVOT_SCHEDULE_MAX_IMPORT_FILE_SIZE,
    ),
    'file_validate_extensions' => array('xml'),
    'pivot_schedule_validate_import_file' => array(),
  ));

  if ($file) {

    // Make sure the schedule import file directory exists.
    $directory = PIVOT_SHEDULE_IMPORT_FILE_DIRECTORY;
    if (file_prepare_directory($directory)) {
      if ($file = file_move($file, PIVOT_SHEDULE_IMPORT_FILE_DIRECTORY)) {
        $form_state['storage']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write file to schedule import directory.'));
      }
    }
    else {
      form_set_error('file', t('Schedule import directory does not exist or is not writable.'));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}

function pivot_schedule_import_form_submit($form, &$form_state) {

  $file = $form_state['storage']['file'];
  unset($form_state['storage']['file']);

  try {

    // Wipe out any previous schedule.
    db_delete('pivot_schedule_show_time');

    // Store the import file permanently.
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);

    $schedule = simplexml_load_file($file->uri);
    $imported = 0;
    foreach ($schedule as $show) {

      $values = array(
        'file_id' => $file->fid,
        'created' => REQUEST_TIME,
        'changed' => REQUEST_TIME,
      );

      // Straight forward string values.
      $values['element_name'] = (string) $show->ElementName;
      $values['title_name'] =  (string) $show->TitleName;
      $values['title_synopsis'] =  (string) $show->TitleSynopsis;
      $values['title_code_wo_series_prefix']
        = (string) $show->TitleCodeWOSeriesPrefix;

      // Combine and convert the start date and time instead a Unix timestamp.
      $start_date = (string) $show->StartDateBroadcast;
      $start_time = (string) $show->StartTime;
      $timezone = new DateTimeZone('EST');
      $start_datetime = DateTime::createFromFormat("m/d/Y G:i:s",
        $start_date . ' ' . $start_time, $timezone);
      if ($start_datetime === FALSE) {
        throw new Exception("Invalid start date time.");
      }
      $values['broadcast_start_time'] = $start_datetime->getTimestamp();

      // Convert the broadcast length to seconds.
      $duration = explode(':', (string) $show->Length);
      $values['broadcast_length']
        = ($duration[0] * 3600)
        + ($duration[1] * 60)
        +  $duration[2];

      // Assume that only premieres will have a value for this field.
      $premiere = (string) $show->TitlePremiereIndicatorCurrentSchedule;
      $values['title_premiere_indicator_current_schedule'] = !empty($premiere);

      // Create and save the schedule time.
      $show_time = pivot_schedule_show_time_create($values);
      $show_time->save();

      // Tick
      $imported += 1;
    }

    drupal_set_message(t('@count show times imported.', array(
      '@count' => $imported,
    )), 'status');
  }
  catch (Exception $e) {
    drupal_set_message(t('An error occurred while importing the schedule, please verify the contents of the import file and try again.'), 'error');
  }
}
